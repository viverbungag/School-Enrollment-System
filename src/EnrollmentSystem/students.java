/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EnrollmentSystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author
 */
public class students extends javax.swing.JFrame {

    /**
     * Creates new form students
     */
    
    subjects subjectsClass = new subjects();
    teachers teachersClass = new teachers();
    
    String finalQuery = "";
    
    public students() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        studentCourse = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        studentGender = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        studentYear = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        studentID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        studentName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        studentAddress = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        idCB = new javax.swing.JComboBox<String>();
        ID_TF = new javax.swing.JTextField();
        nameCB = new javax.swing.JComboBox<String>();
        jLabel13 = new javax.swing.JLabel();
        Sname_TF = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        Ename_TF = new javax.swing.JTextField();
        Saddress_TF = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        addressCB = new javax.swing.JComboBox<String>();
        jLabel17 = new javax.swing.JLabel();
        Scourse_TF = new javax.swing.JTextField();
        Ecourse_TF = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        courseCB = new javax.swing.JComboBox<String>();
        Eaddress_TF = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        genderCB = new javax.swing.JComboBox<String>();
        jLabel19 = new javax.swing.JLabel();
        Sgender_TF = new javax.swing.JTextField();
        Egender_TF = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        ylvlCB = new javax.swing.JComboBox<String>();
        Eylvl_TF = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        Sylvl_TF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        enrollTable = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        addSubjectBtn = new javax.swing.JButton();
        dropSubjectBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        databaseMenu = new javax.swing.JMenu();
        firstSemMenu = new javax.swing.JMenuItem();
        secondSemMenu = new javax.swing.JMenuItem();
        summerMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel4.setText("Student Course");

        jLabel5.setText("Student Gender");

        jLabel6.setText("Student Year lvl");

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Address", "Course", "Gender", "Year", "Units"
            }
        ));
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentTable);

        jLabel1.setText("Student ID");

        jLabel2.setText("Student Name");

        jLabel3.setText("Student Address");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        jLabel7.setText("Student ID");

        jLabel8.setText("Student Name");

        jLabel9.setText("Student Address");

        jLabel10.setText("Student Course");

        jLabel11.setText("Student Gender");

        jLabel12.setText("Student Year lvl");

        idCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", "<>", "<", ">", "<=", ">=" }));
        idCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idCBActionPerformed(evt);
            }
        });

        ID_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ID_TFKeyReleased(evt);
            }
        });

        nameCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OR", "AND" }));
        nameCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameCBActionPerformed(evt);
            }
        });

        jLabel13.setText("Starts");

        Sname_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Sname_TFKeyReleased(evt);
            }
        });

        jLabel14.setText("Ends");

        Ename_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Ename_TFKeyReleased(evt);
            }
        });

        Saddress_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Saddress_TFKeyReleased(evt);
            }
        });

        jLabel16.setText("Starts");

        addressCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OR", "AND" }));
        addressCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressCBActionPerformed(evt);
            }
        });

        jLabel17.setText("Starts");

        Scourse_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Scourse_TFKeyReleased(evt);
            }
        });

        Ecourse_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Ecourse_TFKeyReleased(evt);
            }
        });

        jLabel18.setText("Ends");

        courseCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OR", "AND" }));
        courseCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseCBActionPerformed(evt);
            }
        });

        Eaddress_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Eaddress_TFKeyReleased(evt);
            }
        });

        jLabel15.setText("Ends");

        genderCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OR", "AND" }));
        genderCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderCBActionPerformed(evt);
            }
        });

        jLabel19.setText("Starts");

        Sgender_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Sgender_TFKeyReleased(evt);
            }
        });

        Egender_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Egender_TFKeyReleased(evt);
            }
        });

        jLabel20.setText("Ends");

        ylvlCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OR", "AND" }));
        ylvlCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ylvlCBActionPerformed(evt);
            }
        });

        Eylvl_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Eylvl_TFKeyReleased(evt);
            }
        });

        jLabel21.setText("Ends");

        jLabel22.setText("Starts");

        Sylvl_TF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Sylvl_TFKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(26, 26, 26)
                        .addComponent(idCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ID_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addressCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(nameCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(Sname_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(Ename_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel22)
                            .addGap(18, 18, 18)
                            .addComponent(Sylvl_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel21)
                            .addGap(18, 18, 18)
                            .addComponent(Eylvl_TF, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(courseCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(18, 18, 18)
                                        .addComponent(Saddress_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel15)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel17)
                                    .addGap(18, 18, 18)
                                    .addComponent(Scourse_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel18)))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Eaddress_TF, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                .addComponent(Ecourse_TF)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(genderCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel11))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(ylvlCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel19)
                                    .addGap(18, 18, 18)
                                    .addComponent(Sgender_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel20)))
                            .addGap(18, 18, 18)
                            .addComponent(Egender_TF))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(ID_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nameCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(Sname_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(Ename_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(addressCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(Saddress_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(Eaddress_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(courseCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(Scourse_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ecourse_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(genderCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(Sgender_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Egender_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(ylvlCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(Sylvl_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Eylvl_TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        enrollTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject ID", "Subject Code", "Subject Desc.", "Subject Units", "Subject Sched"
            }
        ));
        jScrollPane2.setViewportView(enrollTable);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        jLabel23.setText("Enrolled Subjects");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enroll", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        addSubjectBtn.setText("Add Subject");
        addSubjectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubjectBtnActionPerformed(evt);
            }
        });

        dropSubjectBtn.setText("Drop Subject");
        dropSubjectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropSubjectBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addSubjectBtn)
                    .addComponent(dropSubjectBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(addSubjectBtn)
                .addGap(29, 29, 29)
                .addComponent(dropSubjectBtn)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel25.setText("Student's Form");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel25)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel25)
                .addContainerGap())
        );

        jMenu1.setText("Window");

        jMenuItem1.setText("Subjects");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Teachers");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("New");

        databaseMenu.setText("Database");

        firstSemMenu.setText("1st Semester");
        firstSemMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstSemMenuActionPerformed(evt);
            }
        });
        databaseMenu.add(firstSemMenu);

        secondSemMenu.setText("2nd Semester");
        secondSemMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondSemMenuActionPerformed(evt);
            }
        });
        databaseMenu.add(secondSemMenu);

        summerMenu.setText("Summer");
        summerMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summerMenuActionPerformed(evt);
            }
        });
        databaseMenu.add(summerMenu);

        jMenu2.add(databaseMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(studentID, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(studentAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(studentCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(studentGender, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(studentYear, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(saveBtn)
                            .addComponent(deleteBtn)
                            .addComponent(updateBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jScrollPane2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addGap(278, 278, 278)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(studentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(studentAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(studentCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(studentGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(studentYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(saveBtn)
                                .addGap(18, 18, 18)
                                .addComponent(deleteBtn)
                                .addGap(18, 18, 18)
                                .addComponent(updateBtn)
                                .addGap(56, 56, 56)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        
        if (studentID.getText().length() > 0 && studentName.getText().length() > 0 && studentAddress.getText().length() > 0 && studentCourse.getText().length() > 0 && studentGender.getText().length() > 0 && studentYear.getText().length() > 0){
            String query = "INSERT INTO students VALUES (?, ?, ?, ?, ?, ?)";
            try{
                ResultSet rs = EnrollmentSystem.con.createStatement().executeQuery("SELECT * FROM students WHERE student_id = '" + studentID.getText() + "'");
                if (rs.next()){
                    JOptionPane.showMessageDialog(this,"Student ID already exist! please choose another one", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    PreparedStatement st = EnrollmentSystem.con.prepareStatement(query);

                    st.setInt(1, Integer.parseInt(studentID.getText()));
                    st.setString(2, studentName.getText());
                    st.setString(3, studentAddress.getText());
                    st.setString(4, studentCourse.getText());
                    st.setString(5, studentGender.getText());
                    st.setString(6, studentYear.getText());

                    st.executeUpdate();
                    JOptionPane.showMessageDialog(this,"Student Successfully Saved");
                    updateTableStudents();
                }
                

            }catch(Exception ex){
                if (ex instanceof NumberFormatException){
                    JOptionPane.showMessageDialog(this,"Please put numeric value in the ID");
                }
            }

        }else{
            JOptionPane.showMessageDialog(this,"Please fill up every field", "Student not saved!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        try{
            String query = "DELETE FROM students";
            if ((finalQuery.equals("SELECT * FROM students") || finalQuery.equals("")) && studentTable.getSelectedRowCount() == 0){
                JOptionPane.showMessageDialog(this,"Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else if (studentTable.getSelectedRowCount() > 0){
                int idx = studentTable.getSelectedRow();
                query += " WHERE student_id = " + studentTable.getValueAt(idx, 0).toString();
                PreparedStatement st = EnrollmentSystem.con.prepareStatement(query);
                st.executeUpdate();
                JOptionPane.showMessageDialog(this,"Student Successfully Deleted");
                filter();
            }
            else{
                query += " WHERE student_id in (select student_id from (" + finalQuery + ") as x)"; 
                PreparedStatement st = EnrollmentSystem.con.prepareStatement(query);
                st.executeUpdate();
                JOptionPane.showMessageDialog(this,"Student Successfully Deleted");
                filter();
            }

        }catch(Exception ex){
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        updateTableStudents();
        
        
        
        
    }//GEN-LAST:event_formWindowOpened

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        
        try{
            ResultSet rs = EnrollmentSystem.con.createStatement().executeQuery("SELECT * FROM students WHERE student_id = '" + studentID.getText() + "'");
            
            if (rs.next() && (!studentID.getText().equals(studentTable.getValueAt(studentTable.getSelectedRow(), 0)))){
                JOptionPane.showMessageDialog(this,"Student ID already exist! please choose another one", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                String query = "UPDATE students SET";
                ArrayList<String> includes = new ArrayList<>();

                if (studentID.getText().length() > 0){
                    includes.add(" student_id = " + studentID.getText());
                }

                if (studentName.getText().length() > 0){
                    includes.add(" student_name = '" + studentName.getText() + "'");
                }

                if (studentAddress.getText().length() > 0){
                    includes.add(" student_address = '" + studentAddress.getText() + "'");
                }

                if (studentCourse.getText().length() > 0){
                    includes.add(" student_course = '" + studentCourse.getText() + "'");
                }

                if (studentGender.getText().length() > 0){
                    includes.add(" student_gender = '" + studentGender.getText() + "'");
                }

                if (studentYear.getText().length() > 0){
                    includes.add(" student_year = '" + studentYear.getText() + "'");
                }

                query += String.join(",", includes);


                if (studentTable.getSelectedRowCount() > 0){
                    int idx = studentTable.getSelectedRow();
                    query +=  " WHERE student_id = " + studentTable.getValueAt(idx, 0).toString();

                }else{
                    query += " WHERE student_id in (select student_id from (" + finalQuery + ") as x)"; 
                }

                PreparedStatement st = EnrollmentSystem.con.prepareStatement(query);       
                st.executeUpdate();
                JOptionPane.showMessageDialog(this,"Student Successfully Updated");
                filter();
                
                
            }
        }catch(Exception ex){
        }
        

        
        
    }//GEN-LAST:event_updateBtnActionPerformed

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        // TODO add your handling code here:
        int idx = studentTable.getSelectedRow();
        
        studentID.setText(studentTable.getValueAt(idx, 0).toString());
        studentName.setText(studentTable.getValueAt(idx, 1).toString());
        studentAddress.setText(studentTable.getValueAt(idx, 2).toString());
        studentCourse.setText(studentTable.getValueAt(idx, 3).toString());
        studentGender.setText(studentTable.getValueAt(idx, 4).toString());
        studentYear.setText(studentTable.getValueAt(idx, 5).toString());
        updateEnrollTable();
    }//GEN-LAST:event_studentTableMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        subjectsClass.setVisible(true);
        subjectsClass.setDefaultCloseOperation(subjectsClass.HIDE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void idCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idCBActionPerformed
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_idCBActionPerformed

    private void nameCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameCBActionPerformed
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_nameCBActionPerformed

    private void ID_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ID_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_ID_TFKeyReleased

    private void Sname_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Sname_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Sname_TFKeyReleased

    private void Ename_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Ename_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Ename_TFKeyReleased

    private void addressCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressCBActionPerformed
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_addressCBActionPerformed

    private void Saddress_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Saddress_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Saddress_TFKeyReleased

    private void Eaddress_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Eaddress_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Eaddress_TFKeyReleased

    private void courseCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseCBActionPerformed
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_courseCBActionPerformed

    private void Scourse_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Scourse_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Scourse_TFKeyReleased

    private void Ecourse_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Ecourse_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Ecourse_TFKeyReleased

    private void genderCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderCBActionPerformed
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_genderCBActionPerformed

    private void Sgender_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Sgender_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Sgender_TFKeyReleased

    private void Egender_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Egender_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Egender_TFKeyReleased

    private void ylvlCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ylvlCBActionPerformed
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_ylvlCBActionPerformed

    private void Sylvl_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Sylvl_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Sylvl_TFKeyReleased

    private void Eylvl_TFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Eylvl_TFKeyReleased
        // TODO add your handling code here:
        filter();
    }//GEN-LAST:event_Eylvl_TFKeyReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        teachersClass.setVisible(true);
        teachersClass.setDefaultCloseOperation(teachersClass.HIDE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void addSubjectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubjectBtnActionPerformed
        if (studentTable.getSelectedRowCount() > 0 && subjectsClass.subjectTable.getSelectedRowCount() > 0){    
            int studentRow = studentTable.getSelectedRow();
            int subjectRow = subjectsClass.subjectTable.getSelectedRow();

            String studentTableValue = studentTable.getValueAt(studentRow, 0).toString();
            String subjectTableValue = subjectsClass.subjectTable.getValueAt(subjectRow, 0).toString();

            String query = "INSERT INTO enroll VALUES (?, ?)";
            try{
                PreparedStatement st = EnrollmentSystem.con.prepareStatement(query);

                st.setString(1, studentTableValue);
                st.setString(2, subjectTableValue);

                st.executeUpdate();
            }catch(Exception ex){

            }
            JOptionPane.showMessageDialog(this,"Subject Successfully added");   
            updateEnrollTable();
            subjectsClass.updateClassTable();
            subjectsClass.updateTableSubjects();
            
            
        }else{
            JOptionPane.showMessageDialog(this,"Please select a row from Student and Subject table", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_addSubjectBtnActionPerformed

    private void dropSubjectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropSubjectBtnActionPerformed
        // TODO add your handling code here:
        
        if (enrollTable.getSelectedRowCount() > 0){
            int idx = studentTable.getSelectedRow();
            int idx2 = enrollTable.getSelectedRow();


            String query = "DELETE FROM enroll WHERE enroll.student_id = ? AND enroll.subject_id = ?";
            try{
                PreparedStatement st = EnrollmentSystem.con.prepareStatement(query);
                st.setInt(1, Integer.parseInt(studentTable.getValueAt(idx, 0).toString()));
                st.setInt(2, Integer.parseInt(enrollTable.getValueAt(idx2, 0).toString()));

                st.executeUpdate();


            }catch(Exception ex){

            }

            JOptionPane.showMessageDialog(this,"Subject Successfully dropped");
            updateEnrollTable();
            subjectsClass.updateClassTable();
            subjectsClass.updateTableSubjects();
            
            
        }else{
            JOptionPane.showMessageDialog(this,"Please select a row from the Enrolled Subjects table", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_dropSubjectBtnActionPerformed

    private void secondSemMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondSemMenuActionPerformed
        DateFormat dFormat = new SimpleDateFormat("yyyy");
        Date date1 = new Date();
        String currentDate = dFormat.format(date1);
        String afterYearDate = String.valueOf(Integer.parseInt(currentDate) + 1);
        
        String databaseName = String.format("2nd_SY%s_%s", currentDate, afterYearDate);
        createDatabase(databaseName);
    }//GEN-LAST:event_secondSemMenuActionPerformed

    private void firstSemMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstSemMenuActionPerformed
        DateFormat dFormat = new SimpleDateFormat("yyyy");
        Date date1 = new Date();
        String currentDate = dFormat.format(date1);
        String afterYearDate = String.valueOf(Integer.parseInt(currentDate) + 1);
        
        String databaseName = String.format("1st_SY%s_%s", currentDate, afterYearDate);
        createDatabase(databaseName);
        
        
    }//GEN-LAST:event_firstSemMenuActionPerformed

    private void summerMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summerMenuActionPerformed
        DateFormat dFormat = new SimpleDateFormat("yyyy");
        Date date1 = new Date();
        String currentDate = dFormat.format(date1);
        String afterYearDate = String.valueOf(Integer.parseInt(currentDate) + 1);
        
        String databaseName = String.format("summer_sy%s_%s", currentDate, afterYearDate);
        createDatabase(databaseName);
    }//GEN-LAST:event_summerMenuActionPerformed

    
    public void updateEnrollTable(){
        
        int idx = studentTable.getSelectedRow();
        DefaultTableModel enrollTableModel = (DefaultTableModel) enrollTable.getModel();
        enrollTableModel.setRowCount(0);
        
        try{
            ResultSet rsEnrolltTable = EnrollmentSystem.con.createStatement().executeQuery(
                    "SELECT subjects.subject_id, subject_code, subject_desc, subject_units, subject_sched "
                    + "FROM students, enroll, subjects "
                    + "WHERE students.student_id = enroll.student_id and enroll.subject_id = subjects.subject_id and students.student_id = " + studentTable.getValueAt(idx, 0));
            
            while (rsEnrolltTable.next()){
                String id = rsEnrolltTable.getString("subject_id");
                String cd = rsEnrolltTable.getString("subject_code");
                String dc = rsEnrolltTable.getString("subject_desc");
                String un = rsEnrolltTable.getString("subject_units");
                String sc = rsEnrolltTable.getString("subject_sched");      
                
                enrollTableModel.addRow(new String[]{id, cd, dc, un, sc});               
            } 
        }catch(Exception ex){
            
        }
    }
    
    public void updateTableStudents(){
        
        DefaultTableModel studentTableModel = (DefaultTableModel) studentTable.getModel();

        studentTableModel.setRowCount(0);
        try{
            ResultSet rsStudentTable = EnrollmentSystem.con.createStatement().executeQuery("SELECT * FROM students");
            ResultSet rsUnit = EnrollmentSystem.con.createStatement().executeQuery("SELECT students.student_id AS id, "
                    + "(SELECT SUM(subject_units) FROM students, enroll, subjects "
                    + "WHERE students.student_id = enroll.student_id and enroll.subject_id = subjects.subject_id and enroll.student_id = id) "
                    + "AS units FROM students");
            
            while (rsStudentTable.next()){
                rsUnit.next();
                String id = rsStudentTable.getString("student_id");
                String nm = rsStudentTable.getString("student_name");
                String ad = rsStudentTable.getString("student_address");
                String cr = rsStudentTable.getString("student_course");
                String gd = rsStudentTable.getString("student_gender");
                String sy = rsStudentTable.getString("student_year");
                String ct = rsUnit.getString("units");
                
//                
                
                studentTableModel.addRow(new String[]{id, nm, ad, cr, gd, sy, ct});
                
            }
  
        }catch(Exception ex){
            
        }
        
    }
    
    public void filter(){
        DefaultTableModel studentTableModel = (DefaultTableModel) studentTable.getModel();
        studentTableModel.setRowCount(0);

        
        finalQuery = "";
        boolean first = true;
        
        String id = ID_TF.getText();
        String Sname = Sname_TF.getText();
        String Ename = Ename_TF.getText();
        String Saddress = Saddress_TF.getText();
        String Eaddress = Eaddress_TF.getText();
        String Scourse = Scourse_TF.getText();
        String Ecourse = Ecourse_TF.getText();
        String Sgender = Sgender_TF.getText();
        String Egender = Egender_TF.getText();
        String Sylvl = Sylvl_TF.getText();
        String Eylvl = Eylvl_TF.getText();
        
        ArrayList<String> nameArr = new ArrayList<>();
        ArrayList<String> addressArr = new ArrayList<>();
        ArrayList<String> courseArr = new ArrayList<>();
        ArrayList<String> genderArr = new ArrayList<>();
        ArrayList<String> ylvlArr = new ArrayList<>();
        
        
        
        if (id.length() > 0 || Sname.length() > 0 || Ename.length() > 0 || Saddress.length() > 0 || Eaddress.length() > 0 || Scourse.length() > 0 || Ecourse.length() > 0 || Sgender.length() > 0 || Egender.length() > 0 || Sylvl.length() > 0 || Eylvl.length() > 0 ){
            
            finalQuery += " WHERE";
            
            if (id.length() > 0){
                finalQuery += " student_id " + idCB.getSelectedItem() + " " + id;
                first = false;
            }
            
            //add elements to arraylist
            if (Sname.length() > 0){
                nameArr.add("student_name LIKE '" + Sname + "%'");
            }
            
            if (Ename.length() > 0){
                nameArr.add("student_name LIKE '%" + Ename + "'");
            }
            
            if (Saddress.length() > 0){
                addressArr.add("student_address LIKE '" + Saddress + "%'");
            }
            
            if (Eaddress.length() > 0){
                addressArr.add("student_address LIKE '%" + Eaddress + "'");
            }
            
            if (Scourse.length() > 0){
                courseArr.add("student_course LIKE '" + Scourse + "%'");
            }
            
            if (Ecourse.length() > 0){
                courseArr.add("student_course LIKE '%" + Ecourse + "'");
            }
            
            if (Sgender.length() > 0){
                genderArr.add("student_gender LIKE '" + Sgender + "%'");
            }
            
            if (Egender.length() > 0){
                genderArr.add("student_gender LIKE '%" + Egender + "'");
            }
            
            if (Sylvl.length() > 0){
                ylvlArr.add("student_year LIKE '" + Sylvl + "%'");
            }
            
            if (Eylvl.length() > 0){
                ylvlArr.add("student_year LIKE '%" + Eylvl + "'");  
            }
            
            //add arraylist elements to finalQuery
            if (nameArr.size() > 0){
                if (!first){
                    finalQuery += " " + nameCB.getSelectedItem().toString();
                    first = false;
                }
                
                finalQuery += " (" + String.join("AND ", nameArr) + ")";
            }
            
            if (addressArr.size() > 0){
                if (!first){
                    finalQuery +=  " " + addressCB.getSelectedItem().toString();
                    first = false;
                }
                
                finalQuery += " (" + String.join("AND ",addressArr) + ")";
            }
            
            if (courseArr.size() > 0){
                if (!first){
                    finalQuery += " " + courseCB.getSelectedItem().toString();
                    first = false;
                }
                
                finalQuery += " (" + String.join("AND ", courseArr) + ")";
            }
            
            if (genderArr.size() > 0){
                if (!first){
                    finalQuery += " " + genderCB.getSelectedItem().toString();
                    first = false;
                }
                
                finalQuery += " (" + String.join("AND ", genderArr) + ")";
            }
            
            if (ylvlArr.size() > 0){
                if (!first){
                    finalQuery += " " + ylvlCB.getSelectedItem().toString();
                    first = false;
                }
                
                finalQuery += " (" + String.join("AND ", ylvlArr) + ")";
            }
            
        }
        
        String filterQuery = finalQuery;
        
        finalQuery = "SELECT * FROM students " + finalQuery;
        
//        System.out.println(finalQuery);
        
        try{
            String unitQuery = "SELECT students.student_id AS id, "
                    + "(SELECT SUM(subject_units) FROM students, enroll, subjects "
                    + "WHERE students.student_id = enroll.student_id and enroll.subject_id = subjects.subject_id and enroll.student_id = id) "
                    + "AS units FROM students " + filterQuery;
            
            ResultSet rsStudentTable = EnrollmentSystem.con.createStatement().executeQuery(finalQuery);
            ResultSet rsUnit = EnrollmentSystem.con.createStatement().executeQuery(unitQuery);
            
            
            while (rsStudentTable.next()){
                rsUnit.next();
                String idd = rsStudentTable.getString("student_id");
                String nm = rsStudentTable.getString("student_name");
                String ad = rsStudentTable.getString("student_address");
                String cr = rsStudentTable.getString("student_course");
                String gd = rsStudentTable.getString("student_gender");
                String sy = rsStudentTable.getString("student_year");
                String ut = rsUnit.getString("units");
                
                studentTableModel.addRow(new String[]{idd, nm, ad, cr, gd, sy, ut});
                
            }

            
        }catch(Exception ex){
            
        }
    }
    
    public void createDatabase(String databaseName){
        
        String query1 = String.format("CREATE DATABASE %s;", databaseName);
        
        String createStudentsTable =  "CREATE TABLE students (\n" +
                                    "	student_id int NOT NULL,\n" +
                                    "	student_name text,\n" +
                                    "	student_address text,\n" +
                                    "	student_course text,\n" +
                                    "	student_gender text,\n" +
                                    "	student_year text,\n" +
                                    "   PRIMARY KEY (student_id)\n" +
                                    ");";
        
        String createSubjectsTable = "CREATE TABLE subjects(\n" +
                                    "    subject_id int NOT NULL,\n" +
                                    "    subject_code text,\n" +
                                    "    subject_desc text,\n" +
                                    "    subject_units int,\n" +
                                    "    subject_sched text,\n" +
                                    "    PRIMARY KEY (subject_id)\n" +
                                    ");";
        
        String createTeachersTable = "CREATE TABLE teachers (\n" +
                                    "	 teacher_id int NOT NULL,\n" +
                                    "    teacher_name text,\n" +
                                    "    teacher_department text,\n" +
                                    "    teacher_address text,\n" +
                                    "    teacher_contact text,\n" +
                                    "    teacher_status text,\n" +
                                    "    PRIMARY KEY(teacher_id)\n" +
                                    ");";
        
        String createEnrollTable = "CREATE TABLE enroll (\n" +
                                    "	enroll_id int NOT NULL,\n" +
                                    "	student_id int,\n" +
                                    "    subject_id int,\n" +
                                    "    PRIMARY KEY(enroll_id),\n" +
                                    "    FOREIGN KEY(student_id) REFERENCES students(student_id),\n" +
                                    "    FOREIGN KEY (subject_id) REFERENCES subjects(subject_id)\n" +
                                    ");";
        
        String createAssignTable = "CREATE TABLE assign (\n" +
                                    "	date text,\n" +
                                    "    teacher_id int,\n" +
                                    "    subject_id int,\n" +
                                    "	FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id),\n" +
                                    "    FOREIGN KEY (subject_id) REFERENCES subjects(subject_id)\n" +
                                    ");";
        
        String createTransactionChargesTable = "CREATE TABLE transaction_charges(\n" +
                                                "    trans_id int NOT NULL,\n" +
                                                "    deparment decimal(15, 2),\n" +
                                                "    subject_units decimal(15, 2),\n" +
                                                "    insuarance decimal(15,2),\n" +
                                                "    computer decimal(15,2),\n" +
                                                "    laboratory decimal(15,2),\n" +
                                                "    cultural decimal(15,2),\n" +
                                                "    library decimal(15,2),\n" +
                                                "    facility decimal(15,2),\n" +
                                                "    PRIMARY KEY (trans_id)\n" +
                                                ");";
        
        String createInvoiceTable = "CREATE TABLE invoice(\n" +
                                    "	invoice_num int NOT NULL,\n" +
                                    "    due_date int,\n" +
                                    "    PRIMARY KEY (invoice_num)\n" +
                                    ");";
        
        String createGradesTable =  "CREATE TABLE grades(\n" +
                                    "	grade_id int NOT NULL,\n" +
                                    "    prelim text,\n" +
                                    "    midterm text,\n" +
                                    "    prefinal text,\n" +
                                    "    PRIMARY KEY (grade_id)\n" +
                                    ");";
        
        try{
            EnrollmentSystem.con.createStatement().executeUpdate(query1);
            
            String connect = String.format("jdbc:mysql://localhost:3306/%s", databaseName);
            
            Connection con2 = DriverManager.getConnection(connect, EnrollmentSystem.user, EnrollmentSystem.pass);
            con2.createStatement().executeUpdate(createStudentsTable);
            con2.createStatement().executeUpdate(createSubjectsTable);
            con2.createStatement().executeUpdate(createTeachersTable);
            con2.createStatement().executeUpdate(createEnrollTable);
            con2.createStatement().executeUpdate(createAssignTable);
            con2.createStatement().executeUpdate(createTransactionChargesTable);
            con2.createStatement().executeUpdate(createInvoiceTable);
            con2.createStatement().executeUpdate(createGradesTable);
            
            
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this,"Database already exists", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new students().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Eaddress_TF;
    private javax.swing.JTextField Ecourse_TF;
    private javax.swing.JTextField Egender_TF;
    private javax.swing.JTextField Ename_TF;
    private javax.swing.JTextField Eylvl_TF;
    private javax.swing.JTextField ID_TF;
    private javax.swing.JTextField Saddress_TF;
    private javax.swing.JTextField Scourse_TF;
    private javax.swing.JTextField Sgender_TF;
    private javax.swing.JTextField Sname_TF;
    private javax.swing.JTextField Sylvl_TF;
    private javax.swing.JButton addSubjectBtn;
    private javax.swing.JComboBox<String> addressCB;
    private javax.swing.JComboBox<String> courseCB;
    private javax.swing.JMenu databaseMenu;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton dropSubjectBtn;
    private javax.swing.JTable enrollTable;
    private javax.swing.JMenuItem firstSemMenu;
    private javax.swing.JComboBox<String> genderCB;
    private javax.swing.JComboBox<String> idCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> nameCB;
    private javax.swing.JButton saveBtn;
    private javax.swing.JMenuItem secondSemMenu;
    private javax.swing.JTextField studentAddress;
    private javax.swing.JTextField studentCourse;
    private javax.swing.JTextField studentGender;
    private javax.swing.JTextField studentID;
    private javax.swing.JTextField studentName;
    private javax.swing.JTable studentTable;
    private javax.swing.JTextField studentYear;
    private javax.swing.JMenuItem summerMenu;
    private javax.swing.JButton updateBtn;
    private javax.swing.JComboBox<String> ylvlCB;
    // End of variables declaration//GEN-END:variables
}
